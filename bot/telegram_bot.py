import asyncio
import httpx
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from datetime import datetime

from httpx import AsyncClient

import bot.keyboard as kb
from app.config import settings
from app.database import async_session_maker
from app.models_db.teams import TeamsDB
from app.models_db.follows import FollowDB

logging.basicConfig(level=logging.INFO)

current_date = datetime.now().strftime("%d.%m.%Y")
bot = Bot(settings.TOKEN)
dp = Dispatcher()

class SelectTeam(StatesGroup):
    id = State()

@dp.message(CommandStart())
async def start_bot(message: Message):
    logging.info(message.from_user.username)
    logging.info(message.from_user.id)
    async with async_session_maker() as session:
        await FollowDB.create_follow(new_user_id=message.from_user.id, follow=None, session=session)
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ö–•–õ.\n"
            "üìÖ –Ø –º–æ–≥—É:\n"
            " –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –º–∞—Ç—á–∏ –ö–•–õ\n"
            " –î–∞–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å –ª—é–±–∏–º—É—é –∫–æ–º–∞–Ω–¥—É\n"
            " –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –¥–µ–Ω—å –∏–≥—Ä—ã\n\n"
            "üöÄ –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –º–∞—Ç—á–∏."
                        , reply_markup=kb.upgrade_info)

@dp.message(F.text == '–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –º–∞—Ç—á–∏')
async def events(message: Message):
    logging.info(message.from_user.username)
    logging.info(message.from_user.id)
    async with httpx.AsyncClient() as client:
        result = await client.get('http://127.0.0.1:8000/events')
    mes = f'üìÜ –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞:{current_date}\n\n'
    #mes += f'------------------------------\n'
    for i in result.json().get('today_events'):
        async with async_session_maker() as session:
            i['owner'] = await TeamsDB.get_team_title(session=session, current_id=i['owner'])
            i['guest'] = await TeamsDB.get_team_title(session=session, current_id=i['guest'])
        if i['status'] == '–ù–µ –Ω–∞—á–∞–ª—Å—è':
            mes += f'üèí –ú–∞—Ç—á: {i['owner']}  {i['scores']}  {i['guest']}\n'
        else:
            mes += f'üèí –ú–∞—Ç—á: {i['owner']}  <tg-spoiler>{i['scores']}</tg-spoiler> {i['guest']}\n'
        mes += f'üïî –í—Ä–µ–º—è: {i['time']}\n'
        mes += f'‚è≥ –°—Ç–∞—Ç—É—Å: {i['status']}\n\n'
       # mes += f'\n------------------------------'
    await message.answer(mes,parse_mode='HTML', reply_markup=kb.upgrade)

@dp.message(F.text == '–í—ã–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É')
async def follow_1(message: Message, state: FSMContext):
    await state.set_state(SelectTeam.id)
    await message.answer('üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n')
    async with AsyncClient() as client:
        result = await client.get('http://127.0.0.1:8000/get_teams')
    mes = ''
    for i in result.json().get('teams'):
        mes += f'{i['id']}:  {i['title']} \n'
    await message.answer(mes)
    await message.answer('\n –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –µ—ë.')

@dp.message(SelectTeam.id)
async def follow_2(message: Message, state: FSMContext):
    await state.update_data(id=int(message.text))
    follow_info = await state.get_data()
    if 1 > follow_info['id'] > 23:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä, –Ω–∞—á–Ω–∏—Ç–µ –≤—Å–µ —Å–Ω–∞—á–∞–ª–∞'
                             ,reply_markup=kb.upgrade_info)
    else:
        async with async_session_maker() as session:
            await FollowDB.update_follow(user_id=message.from_user.id,
                                         team_id=follow_info['id'],
                                         session=session)
            current_team = await TeamsDB.get_team_title(session=session, current_id=follow_info['id'])
        await message.answer(f'‚úÖ –ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞: {current_team}\n–¢—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –µ—ë –º–∞—Ç—á–∞—Ö.', reply_markup=kb.upgrade_info)
    await state.clear()

@dp.callback_query(F.data == 'upgrade_info')
async def upgrade_info(callback: CallbackQuery):
    logging.info(callback.message.from_user.username)
    logging.info(callback.message.from_user.id)
    await callback.message.answer('üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...')
    async with httpx.AsyncClient() as client:
        await client.put('http://127.0.0.1:8000/upgradeDB', timeout=100)
    await callback.message.answer('üéâ –£—Å–ø–µ—Ö! –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.',reply_markup=kb.upgrade_info)
    await callback.answer()

async def send_message():
    async with AsyncClient() as client:
        result_follow = await client.get('http://127.0.0.1:8000/get_follow')
    async with AsyncClient() as client:
        result_events = await client.get('http://127.0.0.1:8000/check_follow')
    for i in result_follow.json().get('follows'):
        for j in result_events.json().get('today_events'):
            if i['follow_team'] == j['owner'] or i['follow_team'] == j['guest']:
                async with async_session_maker() as session:
                    i['follow_team'] = await TeamsDB.get_team_title(session=session, current_id=i['follow_team'])
                try:
                    await bot.send_message(i['user_id'], f"–°–µ–≥–æ–¥–Ω—è –≤ {j['time']} –∏–≥—Ä–∞–µ—Ç {i['follow_team']}")
                    continue
                except Exception as e:
                    logging.error(f'‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {i['user_id']}')


async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º –∑–∞–¥–∞—á–∏...")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)



if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Exit')